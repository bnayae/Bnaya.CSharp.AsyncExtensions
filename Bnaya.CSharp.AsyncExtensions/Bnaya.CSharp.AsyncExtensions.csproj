<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <AssemblyName>Bnaya.CSharp.AsyncExtensions</AssemblyName>
    <RootNamespace>Bnaya.CSharp.AsyncExtensions</RootNamespace>
    <Version>1.0.23</Version>
    <Description>Useful extensions contribution by Bnaya Eshet
Blog: http://blogs.microsoft.co.il/bnaya/

Source Code:
https://github.com/bnayae/Bnaya.CSharp.AsyncExtensions


# NuGet
this library available on NuGet via
Install-Package Bnaya.CSharp.AsyncExtensions

## This library have the following godies:
* Exception Handlinfg
  * ThrowAll (produce AggregateException when waiting on Task.WhenAll)
  * Format (format async exception into friendlier callstack represantation)
* Timeout (will apply timeout semantic for any Task)
  * WithTimeout (will throw on timeout)
  * IsTimeoutAsync (will return indication without throwing, ideal for SLA checks [prctice: check and produce warning])
* Cancellation
  * CancelSafe (will run the CancellationTokenSource.Cancel within try catch and prevent unexpected side effect which can happen when cancellation token registration throw)
* Frendly async locking facilities (which can replace the clasical lock statement).
  * Extensions
    * TryAcquireAsync
    * AcquireAsync
  * Instance-able
    * AsyncLock 
* WhenN: use to complete task aftern n task succeed

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</Description>
    <Copyright>Bnaya Eshet Â©</Copyright>
    <PackageTags>async, Parallel, await, task, timeout, deadlock, cancel, cancellation, bnaya</PackageTags>
    <PackageReleaseNotes>Release 1.0.23 (Breaking Changes)
When / WhenN signature changed (remove the all task Action in flavor of returning all tasks in the result)

Release 1.0.22
Refactor exception.Format

Release 1.0.21
BUG FIX
- Async Lock
Features
-When / WhenN

Release 1.0.19
Features
- Exception.FormatWithLineNumber

Release 1.0.18 (Has Breaking Changes):
Feature:
- WhenN: use to complete task after n task succeed
BUG FIX:
- Breaking changes: IsTimeoutAsync_Test (on versions below 1.0.17)
  Previous versions was returning false when timeout detected and true when timeout not detected
- AcquireAsync and TryAcquireAsync (object disposal race)
</PackageReleaseNotes>
    <PackageProjectUrl>http://blogs.microsoft.co.il/bnaya/</PackageProjectUrl>
    <RepositoryUrl>https://github.com/bnayae/Bnaya.CSharp.AsyncExtensions</RepositoryUrl>
    <RepositoryType>GitHub</RepositoryType>
    <PackageIconUrl>https://github.com/bnayae/BeyondAsyncAwait/blob/master/20.%20Cool%20Extensions/async-ex.png?raw=true</PackageIconUrl>
    <AssemblyVersion>1.0.23.0</AssemblyVersion>
    <FileVersion>1.0.23.0</FileVersion>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <PackageRequireLicenseAcceptance>true</PackageRequireLicenseAcceptance>
    <PackageLicenseUrl>https://www.apache.org/licenses/LICENSE-2.0</PackageLicenseUrl>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <LangVersion>latest</LangVersion>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <LangVersion>latest</LangVersion>
  </PropertyGroup>

  <ItemGroup>
    <None Remove="Bnaya.CSharp.AsyncExtensions.1.0.0.nupkg" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="System.Threading.Tasks.Extensions" Version="4.5.0" />
  </ItemGroup>


</Project>
